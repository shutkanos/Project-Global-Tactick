from copy import deepcopy

import OFAD
import Data
from FileLogger import Log

class SummBafs:
    def __init__(self, Parametrs={'Value': 0, 'Multiplier': 1}):
        self.Value = Parametrs['Value']
        self.Multiple = Parametrs['Multiplier']

    def __getitem__(self, key):
        return object.__getattribute__(self, key)

    def __radd__(self, other: int):
        """–æ—Ä–µ–≥–∏–Ω–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ + –±–∞—Ñ = –∏—Ç–æ–≥–æ–≤–æ–µ —á–∏—Å–ª–æ"""
        return (other + self.Value) * self.Multiple

    def __rsub__(self, other: int):
        """–∏—Ç–æ–≥–æ–≤–æ–µ —á–∏—Å–ª–æ - –±–∞—Ñ = –æ—Ä–µ–≥–∏–Ω–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ"""
        return other / self.Multiple - self.Value

    def __iadd__(self, other):
        """self += other; other: dict | SummBafs"""
        self.Value += other['Value']
        self.Multiple *= other['Multiplier']
        return self

    def __isub__(self, other):
        self.Value -= other['Value']
        self.Multiple /= other['Multiplier']
        return self

    def __repr__(self):
        return f"{vars(self)}"

def SAWVAM(obj, item, PreMax=False):
    """SetAttributeWithValueAndMultiple"""
    value = deepcopy(Data.InfoForUnits[obj._Type][item])
    object.__setattr__(obj, item, value)
    object.__setattr__(obj, "Baf" + item, SummBafs())
    if PreMax: object.__setattr__(obj, "Max" + item, value)

def Generate(cls, Type, Pos, Team, User):
    """–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç –Æ–Ω–∏—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ"""
    '''–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã.'''
    obj = {i.__name__.lower(): i for i in cls.__subclasses__()}[Type]()
    obj._Type = Type
    obj._Team = Team
    obj._User = User
    '''–ê—Ç—Ä–∏–±—É—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –º–Ω–æ–∂–∏—Ç–µ–ª—å.'''
    for attr in ['Shield', 'Damage', 'ViewRange', 'AttackRange']: SAWVAM(obj, attr)
    for attr in ['Hp', 'Steps']: SAWVAM(obj, attr, True)
    '''–¥—Ä—É–≥–∏–µ –ê—Ç—Ä–∏–±—É—Ç—ã'''
    obj.Exists = True
    obj.Position = Pos
    obj.FreeAction = True
    obj.LastAction = None
    obj.ListOfBafs = []
    obj.Inventory = {'Body': [None], 'Arm': [None], 'Inventory': [None, None]}
    return obj

class Unit:
    def __str__(self):
        """–ú–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Æ–Ω–∏—Ç–µ –∏–≥—Ä–æ–∫—É"""
        return f"""{self._Type} {self._Team + 1} –∫–æ–º–∞–Ω–¥—ã –ø–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º {self._User.FirstName}\n–ó–¥–æ—Ä–æ–≤—å–µ: {round(self.Hp, 1)}/{round(self.MaxHp, 1)}\n–©–∏—Ç: {round(self.Shield, 1)}\n–£—Ä–æ–Ω: {round(self.Damage, 1)}\n"""

    def __getattribute__(self, item):
        """–ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∞—Ç—Ä–∏–±—É—Ç–∞–º —é–Ω–∏—Ç–∞"""
        """–ó–∞–º–µ–Ω–∞ self.MaxHp['value'] * self.MaxHp['multiple'] –Ω–∞ self.MaxHp"""
        dicter = object.__getattribute__(self, "__dict__")
        if item in ["Hp", "Shield", "Damage", "Steps", "ViewRange", "AttackRange"]:
            return dicter[item] + dicter["Baf" + item.split('Max')[-1]]
        if item[:2] == "__" or item in list(dicter) + dir(type(self)): return object.__getattribute__(self, item)
        """–ü–æ–∏—Å–∫ –∏–≥—Ä–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —É self, –±–∞—Ñ–æ–≤ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –∑–∞–º–µ–Ω–æ–π"""
        AllMetodeForPlay = object.__getattribute__(self, 'AllMetodeForPlay')()
        if item in AllMetodeForPlay:
            return object.__getattribute__(self, AllMetodeForPlay[item])
        return object.__getattribute__(self, item)

    def __setattr__(self, key, value):
        dicter = self.__dict__
        if key in ['Hp', 'Steps', 'Shield', 'Damage', 'ViewRange', 'AttackRange']:
            value = value - dicter["Baf" + key]
        object.__setattr__(self, key, value)

    def AllMetodeForPlay(self):
        """–ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π —Å–ª–æ–≤–∞—Ä—å –º–µ—Ç–æ–¥–æ–≤ —é–Ω–∏—Ç–∞ (move, attack)"""
        result = {}
        for obj in [self, *object.__getattribute__(self, 'ListOfBafs'), *object.__getattribute__(self, 'GetWorkInventory')]:
            result |= {i[0]: i[1] for i in OFAD.getmembers(obj, predicate=lambda ob: getattr(ob, 'IsMetodeForPlay', None))}
        return result

    def GetWorkInventory(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –≤ –æ—Ç–¥–µ–ª–∞—Ö Body –∏ Arm"""
        inv = object.__getattribute__(self, 'Inventory')
        TrueInv, inv = [], [inv[i] for i in inv if inv[i] and i in ['Body', 'Arm']]
        while inv: TrueInv.extend(inv.pop(0))
        return TrueInv

    @OFAD.MetodeForPlay(Description={'Text': 'üó°'})
    def attack(self, Enemy):
        """–ú–µ—Ç–æ–¥ –∞—Ç–∞–∫–∏ –≤—Ä–∞–≥–∞"""
        Enemy.Hp -= self.Damage - Enemy.Shield
        if Enemy.Hp > 0:
            return Enemy.attack(self.Position, self, FromGame=False)
        Enemy.Exists = False
        return {"update": [Enemy.Position]}

    @OFAD.MetodeForPlay(Description={'Text': 'üö∂'})
    def move(self, Pos, path):
        """–ú–µ—Ç–æ–¥ –¥–≤–∏–∂–µ–Ω–∏—è"""
        last_pos = self.Position.copy()
        if self.Map.MapOfTiles[last_pos[1]][last_pos[0]][0] != self.Map.MapOfTiles[Pos[1]][Pos[0]][0]:
            for baf in self.Map.InfoOfLocations[self.Map.MapOfTiles[last_pos[1]][last_pos[0]][0]]['Bafs']:
                self.DelObject(baf)
            for baf in self.Map.InfoOfLocations[self.Map.MapOfTiles[Pos[1]][Pos[0]][0]]['Bafs']:
                self.AddObject(baf)
        self.Steps -= path[tuple(Pos)][0]
        self.Position = Pos
        return {"update": [last_pos]}

    def NewMove(self):
        """–§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞—é—â–∞—è—Å—è –ø—Ä–∏ –Ω–æ–≤–æ–º —Ö–æ–¥–µ"""
        self.FreeAction = True
        self.Steps = self.MaxSteps

    def AddObject(self, obj):
        for key, item in obj.Parameters.items():
            self.__dict__["Baf" + key.split('Max')[-1]] += item
        if obj.Type == 'Baf': self.ListOfBafs.append(obj)
        elif obj.Type == "Instrument": self.Inventory.append(obj)

    def DelObject(self, obj):
        for key, item in obj.Parameters.items():
            self.__dict__["Baf" + key.split('Max')[-1]] -= item
        if obj.Type == 'Baf': self.ListOfBafs.remove(obj)
        elif obj.Type == 'Instrument': self.Inventory.remove(obj)

'''–†–∞–∑–Ω–æ–≤–∏–¥–Ω–æ—Å—Ç–∏ –Æ–Ω–∏—Ç–∞'''
class King(Unit):
    """–ö–æ—Ä–æ–ª—å"""

class Solder(Unit):
    """–°–æ–ª–¥–∞—Ç"""

class Tank(Unit):
    """–¢–∞–Ω–∫"""

class Scout(Unit):
    """–†–µ–∑–≤–µ–¥—á–∏–∫"""

class Artillery(Unit):
    """–ê—Ä—Ç–∏–ª–ª–µ—Ä–∏—è"""

class Healer(Unit):
    """–ú–µ–¥–∏–∫"""
    def __init__(self):
        SAWVAM(self, 'Heal')

    @OFAD.MetodeForPlay(Description={'Text': '‚úö'})
    def heal(self, Teammate):
        """–ú–µ—Ç–æ–¥ –ª–µ—á–µ–Ω–∏—è"""
        Teammate.Hp = min(Teammate.Hp + self.Heal, Teammate.MaxHp)

class Builder(Unit):
    """–ò–Ω–∂–µ–Ω–∏—Ä—ã"""
    @OFAD.MetodeForPlay(Description={'Text': 'üõ†'})
    def build(self, where):
        pass

