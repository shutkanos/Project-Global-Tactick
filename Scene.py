from telebot.types import InlineKeyboardButton as IKB
from telebot.types import InlineKeyboardMarkup as IKM
from hashlib import sha3_256 as Sha256
from copy import deepcopy
from random import choice
import json, os

import Data
from FileLogger import Log
moredata = Data.moredata

class Scene():
    def __init__(self, Name, Text, Buttons, DinButtons=None, Func=None):
        """
        –°—Ü–µ–Ω–∞ - –æ–±—ä–µ–∫—Ç —Ö—Ä–∞–Ω—è—â–∏–π –∏–Ω—Ñ—É –æ —Å—Ü–µ–Ω–µ, –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —Å–∞–º–∞ —Å—Ü–µ–Ω–∞, –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ, –≤ —Ñ—É–Ω–∫—Ü–∏–∏ Send, –Ω–∏–∂–µ
        Name - –∏–º—è —Å—Ü–µ–Ω—ã (–ø–æ–∫–∞ –ø—É—Å—Ç—ã—à–∫–∞, –ø–æ—Ç–æ–º - –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–≥—Ä–∞–∫—É)
        Text - —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø—É {user.name} –¥–ª—è –≤—ã–≤–æ–¥–∞ –Ω–∏–∫–Ω–µ–π–º–∞ —é–∑–µ—Ä–∞)
        Buttons - –ö–Ω–æ–ø–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:
            –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ:
                Text - —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ (—Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ)
                Call - –°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ü–µ–Ω—É, –ª–∏–±–æ –∫–æ–º–∞–Ω–¥—É (–ø–æ–∫–∞—á—Ç–æ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –≤ main, –ø–æ —Ç–∏–ø—É —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º –∏ —Ç.–¥)
            –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ:
                Requirement - –£—Å–ª–æ–≤–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏ (—Ç–∏–ø–∞ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤ –∏–≥—Ä–µ, —Ç–æ –≤ –º–µ–Ω—é –Ω–µ –±—É–¥–µ—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É)
                Data - –ò–Ω—Ñ–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ü–µ–Ω—ã (–ø–æ —Ç–∏–ø—É –Ω–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞ –ø—Ä–æ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ—É)
                Command - –ö–æ–¥, –∫–∞—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫)
                Translated - –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –ª–∏?
        DinButtons - –¢–æ–∂–µ—Å–∞–º–æ–µ, —á—Ç–æ –∏ –∫–Ω–æ–ø–∫–∏, —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –Ω–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏, –∞ –≤ Send.
        Func - (—ç—Ç–æ —Å–ª–æ–∂–Ω–æ...) –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –≤ main –∏–º–µ—é—Ç—Å—è –¥—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ª–µ–±–æ—Ç–∞ –æ–±—Ä–æ–±–∞—Ç—ã–≤–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ–Ω–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É—é—Ç—Å—è).
            –ù–∞–ø—Ä–∏–º–µ—Ä, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º –º—ã –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–¥–∞—ë—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏, –≥–¥–µ –∏–¥—ë—Ç –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –ø–æ—Å–ª–µ –∏–¥—ë—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        """
        self.Name = Name
        self.Text = Text
        self.Buttons = Buttons
        self.DinButtons = DinButtons
        self.Func = Func

        """–ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç—É –≤ TextWithLanguage, —Ç–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è"""
        """A = []
        for i in list(map(lambda a: list(map(lambda b: b["Text"], a)), Buttons)): A += i
        for TextB in [Text] + A:
            if TextB not in TextWithLanguage:
                TextWithLanguage[TextB] = {"ru": TextB}
            for Lang in set(Languages) - set(TextWithLanguage[TextB]):
                ListText = []
                for i in list(map(lambda a: a.split("}"), TextB.split("{"))): ListText += i
                for i in range(0, len(ListText), 2):
                    if ListText[i]: ListText[i] = transl.translate(f"{ListText[i]}", src="ru", dest=Lang).text
                for i in range(1, len(ListText), 2):
                    ListText[i] = "{" + ListText[i] + "}"
                TextWithLanguage[TextB][Lang] = " ".join(filter(lambda a: a, ListText))"""

def Send(bot, call, user, dopedate=None, ThisCall=True, Update=False):
    for key in moredata.__dict__: exec(f"{key} = moredata.__dict__['{key}']")
    bs = "\n"
    CallData = call.data if ThisCall else call.text
    scene = ListOfScenes[CallData]
    newText = deepcopy(scene.Text)
    newButtons = deepcopy(scene.Buttons)
    #newText = TextWithLanguage[newText][user.Language]
    gloloc = globals() | locals()
    if scene.DinButtons:
        newButtons += eval(scene.DinButtons, gloloc, gloloc)
    """for LineButtons in range(len(newButtons)):
        for Botton in newButtons[LineButtons]:
            if 'Translated' not in Botton or Botton['Translated']:
                Botton['Text'] = TextWithLanguage[Botton['Text']][user.Language]"""
    newText = eval(f"f'{newText}'", gloloc, gloloc)
    DelButton = []
    for LineButtons in range(len(newButtons)):
        DelButton.append([])
        for j, Button in enumerate(newButtons[LineButtons]):
            tr = False
            for i in Button.get('Requirement', []):
                #Log.log("Info", i)
                if not eval(i, gloloc, gloloc):
                    DelButton[-1].append(Button)
                    #Log.log("Info", CallData, "Del", Button)
                    tr = True
                    break
            if tr:
                continue
            Button['Text'] = eval(f'f"""{Button["Text"]}"""')
            Button['Call'] = eval(f'f"""{Button["Call"]}"""')
            for i in range(len(Button.get('Data', []))):
                Button['Data'][i] = eval(f'f"""{Button["Data"][i]}"""')
            Button['Call'] = f"{Button['Call']}|{LineButtons}|{j}"
            #Log.log("Info", CallData, Button)
    if not Update:
        user.PreScene = user.Scene
        user.Scene = {"Name": CallData, "Text": newText, "Buttons": deepcopy(newButtons)}
    for LineButtons in range(len(newButtons)):
        for Button in DelButton[LineButtons]:
            newButtons[LineButtons].remove(Button)
    #Log.log("Info", newButtons)
    Markup = IKM()
    for LineButtons in newButtons:
        Markup.row(*[IKB(text=Button['Text'], callback_data=Button['Call']) for Button in LineButtons])
    if ThisCall:
        bot.edit_message_text(chat_id=user.Id, message_id=call.message.id, text=newText)
        bot.edit_message_reply_markup(chat_id=user.Id, message_id=call.message.id, reply_markup=Markup)
    else:
        bot.send_message(user.Id, text=newText, reply_markup=Markup)
    if scene.Func:
        user.NameFunc = scene.Func
        bot.register_next_step_handler(call.message, moredata.funcs[scene.Func])

def Hash(string):
    return Sha256(bytes(string, "utf-8")).hexdigest()[:10]

NextTypeToTypesgame = {}
for i in Data.Typesgame:
    NextTypeToTypesgame[i] = list(Data.Typesgame[i])
    for j in Data.Typesgame[i]:
        NextTypeToTypesgame[";".join([i, j])] = list(Data.Typesgame[i][j])

choice(list("‚öÄ‚öÅ‚öÇ‚öÉ‚öÑ‚öÖ"))

#AllLanguages = googletrans.LANGUAGES
#AllReverseLanguages = {j: i for i, j in AllLanguages.items()}
#ReverseLanguages = {'chinese (simplified)': 'zh-cn', 'english': 'en', 'french': 'fr', 'german': 'de', 'indonesian': 'id', 'italian': 'it', 'japanese': 'ja', 'korean': 'ko', 'latin': 'la', 'polish': 'pl', 'romanian': 'ro', 'russian': 'ru', 'turkish': 'tr'}
#ReverseLanguages = {'english': 'en', 'russian': 'ru'}
#Languages = {j: i for i, j in ReverseLanguages.items()}
#transl = googletrans.Translator()

#TextWithLanguage = {}
#if os.path.exists("TWL.json"):
#    with open("TWL.json", encoding="utf-8") as file:
#        TextWithLanguage = json.load(file)

ListOfScenes = {}

ListOfScenes["/start"] = Scene(Name='–ú–µ–Ω—é', Text='–¢—ã —Å—Ç–æ–∏—à—å –ø–µ—Ä–µ–¥ –¥–≤–µ—Ä—å—é, –∏ —É —Ç–µ–±—è –ø–æ—è–≤–∏–ª—Å—è –≤—ã–±–æ—Ä:', Buttons=[
    [{'Text': '–ü–æ—Å—Ç—É—á–∞—Ç—å—Å—è üè†', 'Call': '/menu'}, {'Text': '–£–π—Ç–∏ üö™', 'Call': '/exit'}]
    ])

ListOfScenes["/menu"] = Scene(Name='–ú–µ–Ω—é', Text='–ü—É—Ç–Ω–∏–∫, –≤—ã–±–∏—Ä–∞–π –¥–∞ –Ω–µ —Å–ø–µ—à–∏, –Ω–µ –≤–µ—à–∞–π –Ω–∞ —É—à–∏ –ª–∞–ø—à–∏', Buttons=[
    [{'Text': '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É üé≤', 'Call': '/startgame', 'Requirement': ['not user.Room']},
     {'Text': '–ö–æ–º–Ω–∞—Ç–∞ üè†', 'Call': '/Room', 'Requirement': ['user.Room']},
     {'Text': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô', 'Call': '/sittings'}],
    [{'Text': '–°–≤–µ–¥–µ–Ω—å—è ‚Ñπ', 'Call': '/Info', 'Data': ['{user.Id}']}]
    ])

ListOfScenes["/sittings"] = Scene(Name='–ù–∞—Å—Ç—Ä–æ–π–∫–∏', Text='–í—ã–±–∏—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª', Buttons=[
    [{'Text': '–í–∏–∑—É–∞–ª', 'Call': '/visualsittings'}, {'Text': '–ê–∫–∞—É–Ω—Ç', 'Call': '/acauntsittings'}],
    [{'Text': '–í–µ—Ä–Ω—É—Ç—å—Å—è ‚¨Ö', 'Call': '/menu'}]
    ])

ListOfScenes["/visualsittings"] = Scene(Name='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –í–∏–∑—É–∞–ª–∞', Text='–®–∏—Ä–∏–Ω–∞ –≥—Ä–∞–Ω–∏—Ü –∫–ª–µ—Ç–æ–∫: {user.Sittings["WidthTilesBorders"]} % –æ—Ç —à–∏—Ä–∏–Ω—ã –∫–ª–µ—Ç–∫–∏', Buttons=[
    [{'Text': '–ó–∞–¥–∞—Ç—å —á–∏—Å–ª–æ 5 (–≤—Ä–µ–º–µ–Ω–Ω–æ)', 'Call': '/SetWidthTilesBorders5'}, {'Text': '–ó–∞–¥–∞—Ç—å —á–∏—Å–ª–æ 0 (–≤—Ä–µ–º–µ–Ω–Ω–æ)', 'Call': '/SetWidthTilesBorders0'}],
    [{'Text': '–í–µ—Ä–Ω—É—Ç—å—Å—è ‚¨Ö', 'Call': '/sittings'}]
    ])

ListOfScenes["/acauntsittings"] = Scene(Name='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–∫–∞—É–Ω—Ç–∞', Text='–ù–∏–∫–Ω–µ–π–º: {user.Nickname}\\n', Buttons=[
    [{'Text': '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º', 'Call': '/change Nickname'}],
    [{'Text': '–í–µ—Ä–Ω—É—Ç—å—Å—è ‚¨Ö', 'Call': '/sittings'}]
    ])

ListOfScenes["/change Nickname"] = Scene(Name='–ù–∞—Å—Ç—Ä–æ–π–∫–∏', Text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º', Func='ChangeNickname', Buttons=[
    [{'Text': '–í–µ—Ä–Ω—É—Ç—å—Å—è ‚¨Ö', 'Call': '/acauntsittings'}]
    ])

#ListOfScenes["/change Language"] = Scene(Name='–ù–∞—Å—Ç—Ä–æ–π–∫–∏', Text='–ò–∑–º–µ–Ω–∏—Ç—å–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —è–∑—ã–∫', Buttons=[
#    *[[{'Text': transl.translate(i, src="en", dest=j).text, 'Call': i, 'Translated': False}] for i, j in ReverseLanguages.items()], [{'Text': '–í–µ—Ä–Ω—É—Ç—å—Å—è ‚¨Ö', 'Call': '/acauntsittings'}]
#    ])

ListOfScenes["/Info"] = Scene(Name='C—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
    Text='id: {(user := moredata.Users.findUsers({"Id": int(dopedate[0])})).Id}\\n–Ω–∏–∫–Ω–µ–π–º: {user.Nickname}\\n–ü—Ä–∏–≤–∏–ª–µ–≥–∏—è: {user.Privilege}\\n–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.RegisterDate}', Buttons=[
    [{'Text': '–í–µ—Ä–Ω—É—Ç—å—Å—è ‚¨Ö', 'Call': '{user.Scene["Name"]}'}]
    ])

ListOfScenes["/startgame"] = Scene(Name='',
    Text='–¢—ã —Ö–æ—á–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é?', Buttons=[
        [{'Text': '–ó–∞–π—Ç–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É', 'Call': '/JoinPrivatRoom'}, {'Text': '–ó–∞–π—Ç–∏ –≤ –ø—É–±–ª–∏—á–Ω—É—é –∫–æ–º–Ω–∞—Ç—É', 'Call': '/JoinPublicRoom'}],
        [{'Text': '–°–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∫–æ–º–Ω–∞—Ç—É', 'Call': '/Room', 'Command': ['Rooms.CreateRoom(user)']}],
        [{'Text': '–í–µ—Ä–Ω—É—Ç—å—Å—è ‚¨Ö', 'Call': '/menu'}]
    ])

ListOfScenes["/JoinPrivatRoom"] = Scene(Name='–í—Ö–æ–¥ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—É—é –∫–æ–º–Ω–∞—Ç—É', Text='–í–≤–µ–¥–∏—Ç–µ Id', Func='JoinPrivatRoom', Buttons=[
        [{'Text': '–í–µ—Ä–Ω—É—Ç—å—Å—è ‚¨Ö', 'Call': '/startgame'}]
    ])

ListOfScenes["/JoinPublicRoom"] = Scene(Name='–í—Ö–æ–¥ –≤ –ø—É–±–ª–∏—á–Ω—É—é –∫–æ–º–Ω–∞—Ç—É',
    Text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏', Buttons=[], DinButtons="""\
[(more:=moredata)] * 0 + [[{'Text': ro.Name, 'Call': '/Room', 'Command': ['Rooms.findRooms({"Id": int(dopedate[0])})[0].JoinUser(user)'], 'Data': [str(ro.Id)], 'Translated': False}] for ro in more.Rooms.findRooms({"Public": True, "Game": None})] + [[{'Text': '–í–µ—Ä–Ω—É—Ç—å—Å—è ‚¨Ö', 'Call': '/startgame'}]]\
""")

#ListOfScenes["/JoinPublicRoom"] = Scene(Name='–í—Ö–æ–¥ –≤ –ø—É–±–ª–∏—á–Ω—É—é –∫–æ–º–Ω–∞—Ç—É',
#    Text='–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–Ω–∞—Ç—É, –≤ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏', Buttons=[], DinButtons=f"{locals()}")

ListOfScenes["/Room"] = Scene(Name='–ö–æ–º–Ω–∞—Ç–∞', Text='***** {user.Room.Name} *****\\n–†–µ–∂–∏–º: {nm.split(";")[0] if (nm:=user.Room.NameMap) else "–ù–µ –≤—ã–±—Ä–∞–Ω"}\\n–ö–∞—Ä—Ç–∞: {nm.split(";")[-1] if nm else "–ù–µ –≤—ã–±—Ä–∞–Ω–∞"}\\n–ò–≥—Ä–æ–∫–∏:\\n{bs.join([us.Nickname + " " + "üëë " * int(us == user.Room.Owner) + "‚úî" * int(user.Room.Users[us]["Ready"]) + "‚ùå" * int(not user.Room.Users[us]["Ready"]) for us in user.Room.Users if us.Id])}\\n************************************', Buttons=[
        [{'Text': '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É', 'Call': '/Room', 'Command': ['user.Room.StartGame()'], 'Requirement': ['user == user.Room.Owner', 'all([user.Room.Users[i]["Ready"] for i in user.Room.Users if i.Id])', 'user.Room.NameMap']},
         {'Text': '–ù–∞—á–∞—Ç—å –∏–≥—Ä—É (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)', 'Call': '/Room', 'Requirement': ['user == user.Room.Owner', 'not all([user.Room.Users[i]["Ready"] for i in user.Room.Users if i.Id]) or not user.Room.NameMap']},
         {'Text': '–ù–∞–∂–º–∏—Ç–µ, –µ—Å–ª–∏ –≥–æ—Ç–æ–≤—ã', 'Call': '/Room', 'Command': ['user.Room.Users[user]["Ready"] = True', 'user.Room.Update(user)'], 'Requirement': ['not user.Room.Users[user]["Ready"]']},
         {'Text': '–í—ã –≥–æ—Ç–æ–≤—ã', 'Call': '/Room', 'Command': ['user.Room.Users[user]["Ready"] = False', 'user.Room.Update(user)'], 'Requirement': ['user.Room.Users[user]["Ready"]']}],
        [{'Text': '–í—ã–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É', 'Call': '/ChooseMap', 'Requirement': ['user == user.Room.Owner']},
         {'Text': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏', 'Call': '/RoomSittings'},
         {'Text': '–ò–≥—Ä–æ–∫–∏', 'Call': '/RoomPlayers'}],
        [{'Text': '–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é ‚¨Ö', 'Call': '/menu'}, {'Text': '–í—ã–π—Ç–∏ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã ‚¨Ö', 'Call': '/menu', 'Command': ['user.Room.ExitUser(user)']}]
    ])

ListOfScenes["/RoomSittings"] = Scene(Name='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–Ω–∞—Ç—ã', Text='************** –ù–∞—Å—Ç—Ä–æ–π–∫–∏ *************\\n–ö–æ–º–Ω–∞—Ç–∞: {"–ü—É–±–ª–∏—á–Ω–∞—è" if user.Room.Public else "–ü—Ä–∏–≤–∞—Ç–Ω–∞—è"}\\n–í–ª–∞–¥–µ–ª–µ—Ü: {user.Room.Owner}\\n{"*" * 40}', Buttons=[
        [{'Text': '–°–¥–µ–ª–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É –ø—É–±–ª–∏—á–Ω–æ–π', 'Call': '/RoomSittings', 'Requirement': ['user == user.Room.Owner', 'not user.Room.Public'], 'Command': ['user.Room.Public = True', 'user.Room.Update(user)']},
         {'Text': '–°–¥–µ–ª–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É –ø—Ä–∏–≤–∞—Ç–Ω–æ–π', 'Call': '/RoomSittings', 'Requirement': ['user == user.Room.Owner', 'user.Room.Public'], 'Command': ['user.Room.Public = False', 'user.Room.Update(user)']}],
        [{'Text': '–í–µ—Ä–Ω—É—Ç—å—Å—è ‚¨Ö', 'Call': '/Room'}]
    ])

ListOfScenes["/RoomPlayers"] = Scene(Name='–ò–≥—Ä–æ–∫–∏ –∫–æ–º–Ω–∞—Ç—ã', Text='*********** –ò–≥—Ä–æ–∫–∏ –∫–æ–º–Ω–∞—Ç—ã **********\\n{"*" * 40}', Buttons=[
        [{'Text': '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', 'Call': '/Info', 'Data': ['{int(dopedate[0])}'], 'Requirement': ['user.Scene["Name"] == "/RoomPlayers"', 'int(dopedate[1]) != 0']},
         {'Text': '–ö–∏–∫–Ω—É—Ç—å (–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)', 'Call': '/RoomPlayers', 'Data': ['{int(dopedate[0])}', '0'], 'Requirement': ['user.Scene["Name"] == "/RoomPlayers"', 'user == user.Room.Owner', 'int(dopedate[1]) != 0'], 'Command': ['user.Room.ExitUser(moredata.Users.findUsers({"Id": int(dopedate[0])}))']}],
        [{'Text': '–í–µ—Ä–Ω—É—Ç—å—Å—è ‚¨Ö', 'Call': '/Room'}]], DinButtons="""\
[[{'Text': str(us), 'Call': '/RoomPlayers', 'Data': [str(us.Id), '1'], 'Translated': False}] for us in user.Room.Users]\
""")

ListOfScenes["/ChooseMap"] = Scene(Name='–í—ã–±–æ—Ä –∫–∞—Ä—Ç—ã', Text='************* –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º ************\\n{"*" * 40}', Buttons=
    list(map(lambda a: [{'Text': a, 'Call': Hash(a)}], list(Data.Typesgame))) + [[{'Text': '–í–µ—Ä–Ω—É—Ç—å—Å—è ‚¨Ö', 'Call': '/Room'}]])

for i in Data.Typesgame:
    ListOfScenes[Hash(i)] = Scene(Name='–í—ã–±–æ—Ä –∫–∞—Ä—Ç—ã', Text='**** –í—ã–±–µ—Ä–∏ –Ω–∞ —Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –∏–≥—Ä–∞ ****\\n{"*" * 40}', Buttons=
        list(map(lambda a: [{'Text': a, 'Call': Hash(";".join([i, a]))}], list(Data.Typesgame[i]))) + [[{'Text': '–í–µ—Ä–Ω—É—Ç—å—Å—è ‚¨Ö', 'Call': '/ChooseMap'}]])
    
    for j in Data.Typesgame[i]:
        ListOfScenes[Hash(";".join([i, j]))] = Scene(Name='–í—ã–±–æ—Ä –∫–∞—Ä—Ç—ã', Text='************ –í—ã–±–µ—Ä–∏ –∫–∞—Ä—Ç—É ************\\n{"*" * 40}', Buttons=
            list(map(lambda a: [{'Text': a, 'Call': '/Room', 'Command': [f'user.Room.NameMap = "{";".join([i, j, a])}"', 'user.Room.Update(user)']}], list(Data.Typesgame[i][j]))) + [[{'Text': '–í–µ—Ä–Ω—É—Ç—å—Å—è ‚¨Ö', 'Call': Hash(i)}]])

